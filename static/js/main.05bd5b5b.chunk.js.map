{"version":3,"sources":["App.tsx","NivoLineChart.tsx","serviceWorker.ts","index.tsx"],"names":["frameId","audioLoader","listener","sound","analyser","audioMap","LineChart","data","margin","top","right","bottom","left","xScale","type","min","max","yScale","curve","axisTop","axisRight","axisBottom","axisLeft","orient","tickSize","tickPadding","tickRotation","legend","legendOffset","legendPosition","colors","enablePoints","useMesh","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","on","style","itemBackground","App","audioStartRef","useRef","audioEndedRef","userAudioRef","sliderRef","useState","selectedFullData","setFullData","selectedData","setData","selectedDataIndex","setDataIndex","userAudioPath","setUserAudioPath","userAudioName","setUserAudioName","loading","setLoading","useEffect","animate","window","requestAnimationFrame","audioData","getFrequencyData","current","forEach","idx","mapItem","get","undefined","set","buffer","isPlaying","console","log","fullData","Array","from","map","id","key","value","toString","d","i","x","y","focus","cancelAnimationFrame","start","Map","AudioLoader","AudioListener","Audio","AudioAnalyser","load","process","setBuffer","play","setVolume","xhr","loadingStatus","loaded","total","info","Math","floor","onChangeSetIndex","useCallback","debounce","className","ref","accept","onChange","files","name","URL","createObjectURL","htmlFor","onClick","stop","href","rel","target","length","step","e","parseInt","defaultValue","NivoLineChart","Date","getFullYear","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.05bd5b5b.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect, useCallback } from \"react\";\r\n\r\nimport { AudioListener, AudioLoader, AudioAnalyser, Audio } from \"three\";\r\nimport { Serie } from \"@nivo/line\";\r\nimport debounce from \"lodash.debounce\";\r\n\r\nimport \"./index.css\";\r\n\r\nimport NivoLineChart from \"./NivoLineChart\";\r\n\r\nlet frameId: number | null;\r\n\r\nlet audioLoader: AudioLoader;\r\nlet listener: AudioListener;\r\nlet sound: Audio;\r\nlet analyser: AudioAnalyser;\r\n\r\nlet audioMap: Map<number, number[]>;\r\n\r\nconst createLineData = (item: number[]) => item.map((d, i) => ({ x: i, y: d }));\r\n\r\nconst formatData = (id: string, data: { x: number; y: number }[]) => ({\r\n  id,\r\n  data\r\n});\r\n\r\nconst App = () => {\r\n  const audioStartRef = useRef(false);\r\n  const audioEndedRef = useRef(false);\r\n  const userAudioRef = useRef<HTMLInputElement>(null);\r\n  const sliderRef = useRef<HTMLInputElement>(null);\r\n\r\n  const [selectedFullData, setFullData] = useState<Serie[]>();\r\n  const [selectedData, setData] = useState<Serie>();\r\n  const [selectedDataIndex, setDataIndex] = useState<number>();\r\n  const [userAudioPath, setUserAudioPath] = useState<string>();\r\n  const [userAudioName, setUserAudioName] = useState<string>(\"Blue Boi.mp3\");\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    if (typeof selectedDataIndex === \"number\") {\r\n      selectedFullData && setData(selectedFullData[selectedDataIndex]);\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [selectedDataIndex]);\r\n\r\n  const init = () => {\r\n    audioMap = new Map();\r\n    audioLoader = new AudioLoader();\r\n    listener = new AudioListener();\r\n    sound = new Audio(listener);\r\n    analyser = new AudioAnalyser(sound, 1024);\r\n    audioLoader.load(\r\n      userAudioPath || `${process.env.PUBLIC_URL}/BlueBoi.mp3`,\r\n      buffer => {\r\n        if (sound) {\r\n          sound.setBuffer(buffer);\r\n          sound.play();\r\n          sound.setVolume(1);\r\n          audioStartRef.current = true;\r\n          audioEndedRef.current = false;\r\n        }\r\n      },\r\n      xhr => {\r\n        const loadingStatus = (xhr.loaded / xhr.total) * 100;\r\n        console.info(`Audio Loading: ${Math.floor(loadingStatus)}%`);\r\n        if (loadingStatus === 100) {\r\n          console.log(\"Loading Complete\");\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  const animate = () => {\r\n    frameId = window.requestAnimationFrame(animate);\r\n\r\n    const audioData = analyser && analyser.getFrequencyData();\r\n\r\n    audioStartRef.current &&\r\n      !audioEndedRef.current &&\r\n      audioData.forEach((data, idx) => {\r\n        const mapItem = audioMap.get(idx);\r\n        if (mapItem === undefined) {\r\n          audioMap.set(idx, [data]);\r\n        } else {\r\n          audioMap.set(idx, [...mapItem, data]);\r\n        }\r\n      });\r\n\r\n    if (sound.buffer && !sound.isPlaying && !audioEndedRef.current) {\r\n      console.log(\"Ended\");\r\n      audioEndedRef.current = true;\r\n      audioStartRef.current = false;\r\n      const fullData = Array.from(audioMap).map(([key, value]) =>\r\n        formatData(key.toString(), createLineData(value))\r\n      );\r\n      setFullData(fullData);\r\n      setData(fullData[0]);\r\n      setDataIndex(0);\r\n      sliderRef.current && sliderRef.current.focus();\r\n      setLoading(false);\r\n\r\n      frameId && cancelAnimationFrame(frameId);\r\n      frameId = null;\r\n    }\r\n  };\r\n\r\n  const start = () => {\r\n    init();\r\n    setData(undefined);\r\n    if (!frameId) {\r\n      frameId = requestAnimationFrame(animate);\r\n    }\r\n  };\r\n\r\n  const onStartClicked = () => {\r\n    !audioStartRef.current && start();\r\n    setLoading(true);\r\n  };\r\n\r\n  const onEndClicked = () => {\r\n    audioStartRef.current && sound.stop();\r\n    setLoading(false);\r\n  };\r\n\r\n  const onChangeSetIndex = useCallback(\r\n    debounce((value: number) => setDataIndex(value), 100),\r\n    []\r\n  );\r\n\r\n  const onChange = () => {\r\n    if (userAudioRef.current?.files) {\r\n      setUserAudioName(userAudioRef.current.files[0].name);\r\n      setUserAudioPath(URL.createObjectURL(userAudioRef.current.files[0]));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"configs\">\r\n        <div className=\"load-file\">\r\n          <input\r\n            id=\"audio-file\"\r\n            type=\"file\"\r\n            ref={userAudioRef}\r\n            accept=\"audio/*\"\r\n            onChange={onChange}\r\n          />\r\n          <label htmlFor=\"audio-file\">Browse local file</label>\r\n          <small>{userAudioName}</small>\r\n        </div>\r\n        <div className=\"start\">\r\n          <button onClick={onStartClicked} className=\"start-btn\">\r\n            Start\r\n          </button>\r\n          <button onClick={onEndClicked} className=\"stop-btn\">\r\n            Stop\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {!selectedFullData && !audioStartRef.current && (\r\n        <div className=\"instruction\">\r\n          <small>\r\n            This is a helper site for visualizing ByteFrequencyData from\r\n            <strong> THREE.AudioAnalyser.getFrequencyData()</strong>\r\n          </small>\r\n          {loading ? (\r\n            <div className=\"lds-facebook\">\r\n              <div></div>\r\n              <div></div>\r\n              <div></div>\r\n            </div>\r\n          ) : (\r\n            <>\r\n              <br />\r\n              <small>\r\n                1. <strong>Load</strong> audio file to visualize (sample music provided if you just\r\n                want to try it out)\r\n              </small>\r\n              <small>\r\n                2. Once selected, Click <strong>Start</strong> to play & analyse audio\r\n              </small>\r\n              <small>\r\n                3. Wait for audio to finish or click <strong>Stop</strong> to display line chart and\r\n                frequency data slider\r\n              </small>\r\n              <small>\r\n                4. Use <strong>Slider</strong> to select No. of frequency data you want (Default is\r\n                0)\r\n              </small>\r\n              <br />\r\n              <small>\r\n                Note: <strong>Pause</strong> or <strong>Duration control</strong> functionalities\r\n                are not implemented\r\n              </small>\r\n\r\n              <small className=\"music-credit\">\r\n                Sample Music by LAKEY INSPIRED -{\" \"}\r\n                <a\r\n                  href=\"https://soundcloud.com/lakeyinspired/blue-boi\"\r\n                  rel=\"noopener noreferrer\"\r\n                  target=\"_blank\"\r\n                >\r\n                  Blue Boi\r\n                </a>\r\n              </small>\r\n            </>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"control\">\r\n        {selectedFullData && (\r\n          <>\r\n            <input\r\n              id=\"fft-slider\"\r\n              className=\"ranger\"\r\n              type=\"range\"\r\n              min=\"0\"\r\n              max={selectedFullData.length - 1}\r\n              step=\"1\"\r\n              onChange={e => onChangeSetIndex(parseInt(e.target.value))}\r\n              defaultValue={0}\r\n              ref={sliderRef}\r\n            />\r\n            <label htmlFor=\"fft-slider\">\r\n              <small>\r\n                No.{selectedDataIndex} of {selectedFullData.length - 1} Frequency Data\r\n              </small>\r\n            </label>\r\n          </>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"chart\">{selectedData && <NivoLineChart data={[selectedData]} />}</div>\r\n\r\n      <footer>\r\n        <div>\r\n          &copy; {new Date().getFullYear()}{\" \"}\r\n          <a href=\"https://haoranzhang.me/\" rel=\"noopener noreferrer\" target=\"_blank\">\r\n            Haoran Zhang\r\n          </a>\r\n        </div>\r\n      </footer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport { ResponsiveLine, Serie } from \"@nivo/line\";\r\n\r\nconst LineChart = ({ data }: { data: Serie[] }) => {\r\n  return (\r\n    <ResponsiveLine\r\n      data={data}\r\n      margin={{ top: 20, right: 80, bottom: 20, left: 60 }}\r\n      xScale={{ type: \"linear\", min: 0, max: \"auto\" }}\r\n      yScale={{ type: \"linear\", min: 0, max: 260 }}\r\n      curve={\"catmullRom\" as \"linear\"}\r\n      axisTop={null}\r\n      axisRight={null}\r\n      axisBottom={null}\r\n      axisLeft={{\r\n        orient: \"left\",\r\n        tickSize: 5,\r\n        tickPadding: 5,\r\n        tickRotation: 0,\r\n        legend: \"level\",\r\n        legendOffset: -40,\r\n        legendPosition: \"middle\"\r\n      }}\r\n      colors=\"hsl(207.9,79.2%,28.2%)\"\r\n      enablePoints={false}\r\n      useMesh={true}\r\n      legends={[\r\n        {\r\n          anchor: \"bottom-right\",\r\n          direction: \"column\",\r\n          justify: false,\r\n          translateX: 100,\r\n          translateY: 0,\r\n          itemsSpacing: 0,\r\n          itemDirection: \"left-to-right\",\r\n          itemWidth: 80,\r\n          itemHeight: 20,\r\n          itemOpacity: 0.75,\r\n          symbolSize: 12,\r\n          symbolShape: \"circle\",\r\n          symbolBorderColor: \"rgba(0, 0, 0, .5)\",\r\n          effects: [\r\n            {\r\n              on: \"hover\",\r\n              style: {\r\n                itemBackground: \"rgba(0, 0, 0, .03)\",\r\n                itemOpacity: 1\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      ]}\r\n    />\r\n  );\r\n};\r\n\r\nexport default LineChart;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\"No internet connection found. App is running in offline mode.\");\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}