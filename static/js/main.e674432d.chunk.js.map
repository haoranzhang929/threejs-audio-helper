{"version":3,"sources":["App.tsx","NivoLineChart.tsx","serviceWorker.ts","index.tsx"],"names":["frameId","audioLoader","listener","sound","analyser","audioMap","LineChart","data","margin","top","right","bottom","left","xScale","type","min","max","yScale","curve","axisTop","axisRight","axisBottom","axisLeft","orient","tickSize","tickPadding","tickRotation","legend","legendOffset","legendPosition","colors","enablePoints","useMesh","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","on","style","itemBackground","App","audioStartRef","useRef","audioEndedRef","userAudioRef","sliderRef","useState","selectedFullData","setFullData","selectedData","setData","selectedDataIndex","setDataIndex","userAudioPath","setUserAudioPath","userAudioName","setUserAudioName","loading","setLoading","useEffect","animate","window","requestAnimationFrame","audioData","getFrequencyData","current","forEach","idx","mapItem","get","undefined","set","buffer","isPlaying","console","log","fullData","Array","from","map","id","key","value","toString","d","i","x","y","focus","cancelAnimationFrame","start","Map","AudioLoader","AudioListener","Audio","AudioAnalyser","load","process","setBuffer","play","setVolume","xhr","loadingStatus","loaded","total","info","Math","floor","onChangeSetIndex","useCallback","debounce","className","ref","accept","onChange","files","name","URL","createObjectURL","htmlFor","onClick","stop","href","rel","target","length","step","e","parseInt","defaultValue","NivoLineChart","Date","getFullYear","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e674432d.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect, useCallback } from \"react\";\n\nimport { AudioListener, AudioLoader, AudioAnalyser, Audio } from \"three\";\nimport { Serie } from \"@nivo/line\";\nimport debounce from \"lodash.debounce\";\n\nimport \"./index.css\";\n\nimport NivoLineChart from \"./NivoLineChart\";\n\nlet frameId: number | null;\n\nlet audioLoader: AudioLoader;\nlet listener: AudioListener;\nlet sound: Audio;\nlet analyser: AudioAnalyser;\n\nlet audioMap: Map<number, number[]>;\n\nconst createLineData = (item: number[]) => item.map((d, i) => ({ x: i, y: d }));\n\nconst formatData = (id: string, data: { x: number; y: number }[]) => ({\n  id,\n  data\n});\n\nconst App = () => {\n  const audioStartRef = useRef(false);\n  const audioEndedRef = useRef(false);\n  const userAudioRef = useRef<HTMLInputElement>(null);\n  const sliderRef = useRef<HTMLInputElement>(null);\n\n  const [selectedFullData, setFullData] = useState<Serie[]>();\n  const [selectedData, setData] = useState<Serie>();\n  const [selectedDataIndex, setDataIndex] = useState<number>();\n  const [userAudioPath, setUserAudioPath] = useState<string>();\n  const [userAudioName, setUserAudioName] = useState<string>(\"Blue Boi.mp3\");\n  const [loading, setLoading] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (typeof selectedDataIndex === \"number\") {\n      selectedFullData && setData(selectedFullData[selectedDataIndex]);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedDataIndex]);\n\n  const init = () => {\n    audioMap = new Map();\n    audioLoader = new AudioLoader();\n    listener = new AudioListener();\n    sound = new Audio(listener);\n    analyser = new AudioAnalyser(sound, 1024);\n    audioLoader.load(\n      userAudioPath || `${process.env.PUBLIC_URL}/BlueBoi.mp3`,\n      buffer => {\n        if (sound) {\n          sound.setBuffer(buffer);\n          sound.play();\n          sound.setVolume(1);\n          audioStartRef.current = true;\n          audioEndedRef.current = false;\n        }\n      },\n      xhr => {\n        const loadingStatus = (xhr.loaded / xhr.total) * 100;\n        console.info(`Audio Loading: ${Math.floor(loadingStatus)}%`);\n        if (loadingStatus === 100) {\n          console.log(\"Loading Complete\");\n        }\n      }\n    );\n  };\n\n  const animate = () => {\n    frameId = window.requestAnimationFrame(animate);\n\n    const audioData = analyser && analyser.getFrequencyData();\n\n    audioStartRef.current &&\n      !audioEndedRef.current &&\n      audioData.forEach((data, idx) => {\n        const mapItem = audioMap.get(idx);\n        if (mapItem === undefined) {\n          audioMap.set(idx, [data]);\n        } else {\n          audioMap.set(idx, [...mapItem, data]);\n        }\n      });\n\n    if (sound.buffer && !sound.isPlaying && !audioEndedRef.current) {\n      console.log(\"Ended\");\n      audioEndedRef.current = true;\n      audioStartRef.current = false;\n      const fullData = Array.from(audioMap).map(([key, value]) =>\n        formatData(key.toString(), createLineData(value))\n      );\n      setFullData(fullData);\n      setData(fullData[0]);\n      setDataIndex(0);\n      sliderRef.current && sliderRef.current.focus();\n      setLoading(false);\n\n      frameId && cancelAnimationFrame(frameId);\n      frameId = null;\n    }\n  };\n\n  const start = () => {\n    init();\n    setData(undefined);\n    if (!frameId) {\n      frameId = requestAnimationFrame(animate);\n    }\n  };\n\n  const onStartClicked = () => {\n    !audioStartRef.current && start();\n    setLoading(true);\n  };\n\n  const onEndClicked = () => {\n    audioStartRef.current && sound.stop();\n    setLoading(false);\n  };\n\n  const onChangeSetIndex = useCallback(\n    debounce((value: number) => setDataIndex(value), 100),\n    []\n  );\n\n  const onChange = () => {\n    if (userAudioRef.current?.files) {\n      setUserAudioName(userAudioRef.current.files[0].name);\n      setUserAudioPath(URL.createObjectURL(userAudioRef.current.files[0]));\n    }\n  };\n\n  return (\n    <>\n      <div className=\"configs\">\n        <div className=\"load-file\">\n          <input\n            id=\"audio-file\"\n            type=\"file\"\n            ref={userAudioRef}\n            accept=\"audio/*\"\n            onChange={onChange}\n          />\n          <label htmlFor=\"audio-file\">Browse local file</label>\n          <small>{userAudioName}</small>\n        </div>\n        <div className=\"start\">\n          <button onClick={onStartClicked} className=\"start-btn\">\n            Start\n          </button>\n          <button onClick={onEndClicked} className=\"stop-btn\">\n            Stop\n          </button>\n        </div>\n      </div>\n\n      {!selectedFullData && !audioStartRef.current && (\n        <div className=\"instruction\">\n          <small>\n            This is a helper site for visualizing ByteFrequencyData from\n            <strong> THREE.AudioAnalyser.getFrequencyData()</strong>\n          </small>\n          {loading ? (\n            <div className=\"lds-facebook\">\n              <div></div>\n              <div></div>\n              <div></div>\n            </div>\n          ) : (\n            <>\n              <br />\n              <small>\n                1. <strong>Load</strong> audio file to visualize (sample music provided if you just\n                want to try it out)\n              </small>\n              <small>\n                2. Once selected, Click <strong>Start</strong> to play & analyse audio\n              </small>\n              <small>\n                3. Wait for audio to finish or click <strong>Stop</strong> to display line chart and\n                frequency data slider\n              </small>\n              <small>\n                4. Use <strong>Slider</strong> to select No. of frequency data you want (Default is\n                0)\n              </small>\n              <br />\n              <small>\n                Note: <strong>Pause</strong> or <strong>Duration control</strong> functionalities\n                are not implemented\n              </small>\n\n              <small className=\"music-credit\">\n                Sample Music by LAKEY INSPIRED -{\" \"}\n                <a\n                  href=\"https://soundcloud.com/lakeyinspired/blue-boi\"\n                  rel=\"noopener noreferrer\"\n                  target=\"_blank\"\n                >\n                  Blue Boi\n                </a>\n              </small>\n            </>\n          )}\n        </div>\n      )}\n\n      <div className=\"control\">\n        {selectedFullData && (\n          <>\n            <input\n              id=\"fft-slider\"\n              className=\"ranger\"\n              type=\"range\"\n              min=\"0\"\n              max={selectedFullData.length - 1}\n              step=\"1\"\n              onChange={e => onChangeSetIndex(parseInt(e.target.value))}\n              defaultValue={0}\n              ref={sliderRef}\n            />\n            <label htmlFor=\"fft-slider\">\n              <small>\n                No.{selectedDataIndex} of {selectedFullData.length - 1} Frequency Data\n              </small>\n            </label>\n          </>\n        )}\n      </div>\n\n      <div className=\"chart\">{selectedData && <NivoLineChart data={[selectedData]} />}</div>\n\n      <footer>\n        <div>\n          &copy; {new Date().getFullYear()}{\" \"}\n          <a href=\"https://haoranzhang.me/\" rel=\"noopener noreferrer\" target=\"_blank\">\n            Haoran Zhang\n          </a>\n        </div>\n      </footer>\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport { ResponsiveLine, Serie } from \"@nivo/line\";\n\nconst LineChart = ({ data }: { data: Serie[] }) => {\n  return (\n    <ResponsiveLine\n      data={data}\n      margin={{ top: 20, right: 80, bottom: 20, left: 60 }}\n      xScale={{ type: \"linear\", min: 0, max: \"auto\" }}\n      yScale={{ type: \"linear\", min: 0, max: 260 }}\n      curve={\"catmullRom\" as \"linear\"}\n      axisTop={null}\n      axisRight={null}\n      axisBottom={null}\n      axisLeft={{\n        orient: \"left\",\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: \"level\",\n        legendOffset: -40,\n        legendPosition: \"middle\"\n      }}\n      colors=\"hsl(207.9,79.2%,28.2%)\"\n      enablePoints={false}\n      useMesh={true}\n      legends={[\n        {\n          anchor: \"bottom-right\",\n          direction: \"column\",\n          justify: false,\n          translateX: 100,\n          translateY: 0,\n          itemsSpacing: 0,\n          itemDirection: \"left-to-right\",\n          itemWidth: 80,\n          itemHeight: 20,\n          itemOpacity: 0.75,\n          symbolSize: 12,\n          symbolShape: \"circle\",\n          symbolBorderColor: \"rgba(0, 0, 0, .5)\",\n          effects: [\n            {\n              on: \"hover\",\n              style: {\n                itemBackground: \"rgba(0, 0, 0, .03)\",\n                itemOpacity: 1\n              }\n            }\n          ]\n        }\n      ]}\n    />\n  );\n};\n\nexport default LineChart;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}